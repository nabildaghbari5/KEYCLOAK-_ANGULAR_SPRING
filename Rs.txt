* NX : un outil puissant pour gérer des monorepos, idéal pour des architectures micro-frontend (MFE).
* Chaque micro-frontend ou bibliothèque interne est défini par un project.json.
* dans le monorepo sheard 
 
  . ui est une librairie partagée (type library) qui peut être utilisée par plusieurs micro-frontends      (réutilisable, pas autonome).

: {
  "name": "ui",
  "$schema": "../node_modules/nx/schemas/project-schema.json",
  "sourceRoot": "shared/src",
  "prefix": "lib",
  "projectType": "library",
  "tags": [],
  "targets": {
    "test": {
      "executor": "@nx/jest:jest",
      "outputs": ["{workspaceRoot}/coverage/{projectRoot}"],
      "options": {
        "jestConfig": "shared/jest.config.ts"
      }
    },
    "lint": {
      "executor": "@nx/eslint:lint"
    }
  }
}

 3. Communication entre micro-frontends (via Module Federation) : 
* NX utilise Webpack 5 Module Federation pour charger dynamiquement des micro-frontends :

 * Chaque micro-frontend expose certains modules via webpack.config.js.

 * Le shell (application principale) les importe à l’exécution.


********************************************************* 
 1 - Lister les projets disponibles  
   npx nx show projects

*******************************************************
2 - commande de cree l'pplication hote shelle 
====> npx nx g @nrwl/angular:host shell --remotes=interview-mfe,TalentCloud

---->   Cela va :

Créer une app apps/shell/

Ajouter Module Federation à shell

Configurer les remotes automatiquement


****************************
Explication des applications créées :
shell : C'est ton application principale (hôte) qui charge les micro-frontends et permet de les gérer.

shell-e2e : C'est une application de test de bout en bout (E2E) qui est automatiquement générée pour tester l'application shell avec Cypress (puisque tu as choisi cypress comme test runner).


 *** ==> server :  npx nx serve shell  

**********************************************************************************************
Les etapes sur keycloak : 
* - cree realm 
*  - cree client 
* cree user --> dans crediatiels cree le password de user 

***********************************************************************************

- commade qui permet de cree un service keycloak dans le Library ---> data acces 
==>  npx nx g service keycloak --project=data-access










